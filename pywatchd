#!/usr/bin/python

from watchd.metrics import aggregated_elb
from watchd.server import socket_server
from watchd import datastore

import yaml

import datetime
import time
import traceback
import os

collectd_types = """
aggregated_metric average:GAUGE:0:U sigma:GAUGE:0:U one_tenth:GAUGE:0:U five_mins:GAUGE:0:U
aggregated_elb    average:GAUGE:0:U sigma:GAUGE:0:U one_tenth:GAUGE:0:U five_mins:GAUGE:0:U out:GAUGE:0:U count:GAUGE:0:U
"""


if __name__ == '__main__' :

  if len(os.sys.argv) == 2 and os.sys.argv[1] == "--collectd" :
      print collectd_types
      os.sys.exit(0)

  if len(os.sys.argv) != 1 :
      print "Usage: %s [--collectd]" % os.sys.argv[0].split('.')[-1]
      os.sys.exit(2)

  pidfile = "/var/run/watchd.pid"
  if os.path.isfile(pidfile) :
      print "PID file exists, another watchd instance is likely running"
      os.sys.exit(1)

  newpid = os.fork()
  if newpid :
      with open( pidfile , 'w' ) as fd :
          fd.write( "%d\n" % newpid )
      os.sys.exit(0)

  server = socket_server()
  server.start()

  config = 'watchd.yml'
  if not os.path.isfile( config ) :
      conf_file = os.path.join( '/etc' , config )
  with open( config ) as fd :
      config = yaml.load( fd )

  state = { 'serving':True }

  metrics = []
  for name in config :
      metrics.append( aggregated_elb(name, config) )

  while state['serving'] :

   for metric in metrics :
    sock = datastore.collectd()

    try :
      metric.update( sock )
      metric.check_thresholds()
    except Exception , ex :
      os.sys.stdout.write( "Exception happened at %s\n%s\n" %( datetime.datetime.now() , ex ) )
      traceback.print_exc()
      os.sys.stdout.write( "\n" )
      os.sys.stdout.flush()

   with open('/var/lib/nagios3/rw/nagios.cmd', 'a+') as fd :
        fd.write( "[%d] PROCESS_SERVICE_CHECK_RESULT;admin11;watchd;0;watchd OK - service running\n" % time.time() )

   time.sleep(60)

  os.unlink( sockfile )
  os.unlink( pidfile )

